<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/conflict-resolution-and-code-reviews">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/conflict-resolution-and-code-reviews"><div><img src="https://images.ponyfoo.com/uploads/chess-1215079_1920-33043c891c1c440d8a28e8b936d077a8.jpg" alt="Conflict Resolution and Code Reviews"></div></a>

<h1>Conflict Resolution and Code Reviews</h1>

<p><kbd>git</kbd> <kbd>tips</kbd></p>

<blockquote><p>Have you ever tried to do a code review on a PR that merges a large release branch or feature branch back into mainline, fixing merge conflicts? It&#x2019;s not pretty.</p>
</blockquote>

<div><p>Have you ever tried to do a code review on a PR that merges a large release branch or feature branch back into mainline, fixing merge conflicts? It&#x2019;s not pretty. The diffs are often and easily very big, <em>&#x2014; 50k+ LOC big &#x2014;</em> have hundreds of commits, and the actual changes made by the engineer resolving the merge conflicts are virtually impossible to spot.</p></div>

<blockquote></blockquote>

<div><p>This article covers one nifty trick I&#x2019;ve been using lately in these cases that lets you review exactly the conflict resolution, while ignoring the mountains of changes that don&#x2019;t represent any conflicts (and can thus be safely ignored).</p></div>

<div><h1 id="check-out-the-pr-locally">Check out the PR locally</h1> <p>If you haven&#x2019;t done this before, you can just add the author&#x2019;s remote (provided they&#x2019;re using a fork, otherwise you can skip this step) like so:</p> <pre class="md-code-block"><code class="md-code md-lang-bash">$ git remote add nico https://github.com/nico/repo.git
</code></pre> <p>Then we can fetch the PR branch, let&#x2019;s assume it&#x2019;s called <code class="md-code md-code-inline">fix-merge-conflicts</code> and it was merging <code class="md-code md-code-inline">branch-with-conflicts</code> into <code class="md-code md-code-inline">master</code>, fixing the conflicts along the way:</p> <pre class="md-code-block"><code class="md-code md-lang-bash">$ git fetch nico fix-merge-conflicts
$ git checkout fix-merge-conflicts
</code></pre> <h1 id="assess-the-situation">Assess the situation</h1> <p>The <code class="md-code md-code-inline">git log</code> should indicate they&#x2019;ve merged a couple branches. The commit hashes are the key bits here.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">$ git <span class="md-code-built_in">log</span> -<span class="md-code-number">1</span> HEAD
commit a9c9ed7gcc0a76670d86df4b732f1f219ccb48de (HEAD -&gt; fix-merge-conflicts)
Merge: <mark class="md-mark md-code-mark">aecf730802</mark> <mark class="md-mark md-code-mark">ba9918dad5</mark>
Author: Bloodninja &lt;bloodninja@usenet.org&gt;
Date:   Mon Apr <span class="md-code-number">8</span> <span class="md-code-number">12</span>:<span class="md-code-number">32</span>:<span class="md-code-number">38</span> <span class="md-code-number">2019</span> +<span class="md-code-number">0000</span>

    Merge remote-tracking branch <span class="md-code-string">&apos;branch-with-conflicts&apos;</span>
</code></pre> <p>And now we can verify that these indeed belong to each of the branches we care about:</p> <pre class="md-code-block"><code class="md-code md-lang-bash">$ git branch --contains=<mark class="md-mark md-code-mark">aecf730802</mark>
  master
* fix-merge-conflicts
$ git branch --contains=<mark class="md-mark md-code-mark">ba9918dad5</mark>
  branch-with-conflicts
* fix-merge-conflicts
</code></pre> <h2 id="now-for-the-magic">Now for the magic</h2> <pre class="md-code-block"><code class="md-code md-lang-bash">git checkout -b what-were-they-thinking
git reset --hard <mark class="md-mark md-code-mark">aecf730802</mark>
git merge --no-ff <mark class="md-mark md-code-mark">ba9918dad5</mark> <span class="md-code-comment"># this will conflict</span>
git add .
git commit -m WIP
</code></pre> <p>At this point, <code class="md-code md-code-inline">what-were-they-thinking</code> is the version of the conflict resolution where you just committed things exactly as <code class="md-code md-code-inline">git merge</code> left them, conflict markers and all.</p> <p>And, presto, the following command lets you see exactly what they did.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">git diff what-were-they-thinking fix-merge-conflicts
</code></pre> <p>Obviously all the commit hashes, branch names, and the author are made up here, and you&#x2019;ll have to use the actual output you get in each command to feed that into the following command, but you already knew that so I&#x2019;ll just stop mansplaining and typing these words now!</p> <p>Do you have any other quick and dirty tricks like this that would blow most people&#x2019;s minds? This one certainly blew my mind, although I can&#x2019;t claim credit for it. All credit goes to my brilliant co-worker <a href="https://twitter.com/CrazyJoeGallo" target="_blank" rel="noopener noreferrer" aria-label="@CrazyJoeGallo on Twitter">Joe Gallo</a>, who taught me this nifty trick and is a <code class="md-code md-code-inline">git</code> mastermind! &#x1F970;</p></div>
